import React, { useState, useEffect, useRef } from "react";
import "./styles.css";

const KisaanSevaChatbot = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState([
    {
      id: 1,
      text: "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç KisaanSeva ‡§ï‡§æ AI ‡§Ö‡§∏‡§ø‡§∏‡•ç‡§ü‡•á‡§Ç‡§ü ‡§π‡•Ç‡§Ç‡•§ ‡§Æ‡•à‡§Ç ‡§™‡•å‡§ß‡•ã‡§Ç ‡§ï‡•Ä ‡§¨‡•Ä‡§Æ‡§æ‡§∞‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•Ä ‡§™‡§π‡§ö‡§æ‡§® ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§ ‡§Ü‡§™ ‡§Ö‡§™‡§®‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§™‡•Ç‡§õ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§",
      sender: "bot",
      timestamp: new Date(),
    },
  ]);
  const [inputMessage, setInputMessage] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef(null);
  const chatbotId = "R89KxXiIWPIEb4Zf8-Ubj";

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    // Load Chatbase script when component mounts
    if (!window.chatbaseConfig) {
      const script = document.createElement("script");
      script.src = "https://www.chatbase.co/embed.min.js";
      script.defer = true;
      script.onload = () => {
        // Initialize Chatbase
        if (window.chatbase) {
          window.chatbase("init", {
            chatbotId: chatbotId,
            domain: window.location.hostname,
          });
        }
      };
      document.body.appendChild(script);
      window.chatbaseConfig = true;
    }
  }, []);

  const sendToChatbase = async (message) => {
    try {
      // Send message to Chatbase API
      const response = await fetch("https://www.chatbase.co/api/v1/chat", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          message: message,
          chatbotId: chatbotId,
          stream: false,
        }),
      });

      if (!response.ok) {
        throw new Error("Failed to get response from Chatbase");
      }

      const data = await response.json();

      setMessages((prev) => [
        ...prev,
        {
          id: Date.now(),
          text:
            data.text ||
            "‡§ï‡•ç‡§∑‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç, ‡§Æ‡•Å‡§ù‡•á ‡§∏‡§Æ‡§ù‡§®‡•á ‡§Æ‡•á‡§Ç ‡§ï‡•Å‡§õ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•Å‡§à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§",
          sender: "bot",
          timestamp: new Date(),
        },
      ]);
    } catch (error) {
      console.error("Chatbase API error:", error);

      // Fallback responses if API fails
      const fallbackResponses = [
        "‡§Ü‡§™‡§ï‡•á ‡§™‡•å‡§ß‡•á ‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§î‡§∞ ‡§¨‡§§‡§æ‡§è‡§Ç‡•§ ‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§™‡§§‡•ç‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§™‡§∞ ‡§ï‡•ã‡§à ‡§ß‡§¨‡•ç‡§¨‡•á ‡§Ø‡§æ ‡§∞‡§Ç‡§ó ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤‡§æ‡§µ ‡§¶‡•á‡§ñ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç?",
        "‡§Ø‡§π ‡§™‡•å‡§ß‡•á ‡§ï‡•Ä ‡§¨‡•Ä‡§Æ‡§æ‡§∞‡•Ä ‡§π‡•ã ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ‡§ø‡§§ ‡§™‡§§‡•ç‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•Ä ‡§§‡§∏‡•ç‡§µ‡•Ä‡§∞ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç ‡§§‡§æ‡§ï‡§ø ‡§Æ‡•à‡§Ç ‡§¨‡•á‡§π‡§§‡§∞ ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡•Ç‡§Ç‡•§",
        "‡§á‡§∏ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§™ ‡§ú‡•à‡§µ‡§ø‡§ï ‡§ï‡§µ‡§ï‡§®‡§æ‡§∂‡•Ä ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§ ‡§®‡•Ä‡§Æ ‡§ï‡§æ ‡§§‡•á‡§≤ ‡§≠‡•Ä ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ‡•Ä ‡§π‡•ã ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§",
        "‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡§π‡§æ‡§Ç ‡§π‡•Ç‡§Ç‡•§ ‡§ï‡•É‡§∑‡§ø ‡§∏‡•á ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§ï‡•ã‡§à ‡§≠‡•Ä ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§™‡•Ç‡§õ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§",
      ];
      const fallbackResponse =
        fallbackResponses[Math.floor(Math.random() * fallbackResponses.length)];

      setMessages((prev) => [
        ...prev,
        {
          id: Date.now(),
          text: fallbackResponse,
          sender: "bot",
          timestamp: new Date(),
        },
      ]);
    } finally {
      setIsTyping(false);
    }
  };

  const handleSendMessage = async () => {
    if (!inputMessage.trim()) return;

    const userMessage = {
      id: Date.now(),
      text: inputMessage,
      sender: "user",
      timestamp: new Date(),
    };

    setMessages((prev) => [...prev, userMessage]);
    setInputMessage("");
    setIsTyping(true);

    // Send to Chatbase or your backend
    await sendToChatbase(inputMessage);
  };

  const handleKeyPress = (e) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const handleQuickAction = (action) => {
    setInputMessage(action);
  };

  const quickActions = [
    "‡§™‡§§‡•ç‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§™‡§∞ ‡§ß‡§¨‡•ç‡§¨‡•á ‡§¶‡§ø‡§ñ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç",
    "‡§™‡•å‡§ß‡•á ‡§ï‡•Ä ‡§™‡§§‡•ç‡§§‡§ø‡§Ø‡§æ‡§Ç ‡§™‡•Ä‡§≤‡•Ä ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à‡§Ç",
    "‡§´‡§∏‡§≤ ‡§Æ‡•á‡§Ç ‡§ï‡•Ä‡§°‡§º‡•á ‡§≤‡§ó ‡§ó‡§è ‡§π‡•à‡§Ç",
    "‡§™‡•å‡§ß‡•á ‡§ï‡•Ä ‡§µ‡•É‡§¶‡•ç‡§ß‡§ø ‡§∞‡•Å‡§ï ‡§ó‡§à ‡§π‡•à",
  ];

  const formatTime = (date) => {
    return date.toLocaleTimeString("hi-IN", {
      hour: "2-digit",
      minute: "2-digit",
    });
  };

  return (
    <div className="chatbot-container">
      {/* Chat Window */}
      {isOpen && (
        <div className="chat-window">
          {/* Header */}
          <div className="chat-header">
            <div className="chat-header-info">
              <div className="chat-avatar">
                <span className="leaf-icon">üåø</span>
              </div>
              <div className="chat-header-text">
                <h3 className="chat-title">KisaanSetu AI</h3>
                <p className="chat-subtitle">Plant Disease Expert</p>
              </div>
            </div>
            <button onClick={() => setIsOpen(false)} className="close-button">
              <span className="close-icon">√ó</span>
            </button>
          </div>

          {/* Messages */}
          <div className="messages-container">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`message ${
                  message.sender === "user" ? "message-user" : "message-bot"
                }`}
              >
                <div className="message-content">
                  <div
                    className={`message-avatar ${
                      message.sender === "user" ? "avatar-user" : "avatar-bot"
                    }`}
                  >
                    <span className="avatar-icon">
                      {message.sender === "user" ? "üë§" : "ü§ñ"}
                    </span>
                  </div>
                  <div
                    className={`message-bubble ${
                      message.sender === "user" ? "bubble-user" : "bubble-bot"
                    }`}
                  >
                    <p className="message-text">{message.text}</p>
                    <p className="message-time">
                      {formatTime(message.timestamp)}
                    </p>
                  </div>
                </div>
              </div>
            ))}

            {isTyping && (
              <div className="message message-bot">
                <div className="message-content">
                  <div className="message-avatar avatar-bot">
                    <span className="avatar-icon">ü§ñ</span>
                  </div>
                  <div className="message-bubble bubble-bot">
                    <div className="typing-indicator">
                      <div className="typing-dot"></div>
                      <div className="typing-dot"></div>
                      <div className="typing-dot"></div>
                    </div>
                  </div>
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>

          {/* Quick Actions */}
          {messages.length === 1 && (
            <div className="quick-actions">
              <p className="quick-actions-title">‡§§‡•ç‡§µ‡§∞‡§ø‡§§ ‡§™‡•ç‡§∞‡§∂‡•ç‡§®:</p>
              <div className="quick-actions-buttons">
                {quickActions.map((action, index) => (
                  <button
                    key={index}
                    onClick={() => handleQuickAction(action)}
                    className="quick-action-button"
                  >
                    {action}
                  </button>
                ))}
              </div>
            </div>
          )}

          {/* Input */}
          <div className="chat-input-container">
            <div className="chat-input-wrapper">
              <input
                type="text"
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="‡§Ö‡§™‡§®‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§≤‡§ø‡§ñ‡•á‡§Ç..."
                className="chat-input"
              />
              <button
                onClick={handleSendMessage}
                disabled={!inputMessage.trim()}
                className="send-button"
              >
                <span className="send-icon">‚û§</span>
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Chat Bubble */}
      <button onClick={() => setIsOpen(!isOpen)} className="chat-bubble">
        {isOpen ? (
          <span className="bubble-icon">√ó</span>
        ) : (
          <>
            <span className="bubble-icon">üí¨</span>
            {/* Notification dot */}
            <div className="notification-dot"></div>
          </>
        )}
      </button>
    </div>
  );
};

export default KisaanSevaChatbot;
